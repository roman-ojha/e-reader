// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// generator typegraphql {
//   provider = "typegraphql-prisma"
// }

// generate graphql schema from prisma Schema
generator graphql {
  provider = "graphql-schema-generator"
  // createCRUD = "true"
  output   = "../schema"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                    Int                @id @default(autoincrement())
  username              String             @unique
  first_name            String?
  last_name             String?
  email                 String             @unique
  password              String
  role                  Role               @default(USER)
  createdAt             DateTime           @default(now())
  updateAt              DateTime           @updatedAt
  author                Author?
  AddToCard             AddToCard[]
  PurchasedBook         PurchasedBook[]
  BookReview            BookReview[]
  StoreBookReview       StoreBookReview[]
  CurrentlyReadingBooks CurrentlyReading[]
  FinishedReadingBooks  FinishedReading[]

  @@index([email, username])
}

model Book {
  id                    Int                @id @default(autoincrement())
  author                Author             @relation(fields: [authorId], references: [id])
  authorId              Int
  title                 String
  page                  Int                @default(0)
  description           String?
  published             DateTime?
  langauge              String?
  createAt              DateTime           @default(now())
  updateAt              DateTime           @updatedAt
  BookStore             BookStore?
  genres                Genere[]
  PurchasedUsers        PurchasedBook[]
  BookReviewedUsers     BookReview[]
  CurrentlyReadingUsers CurrentlyReading[]
  FinishedReadingUsers  FinishedReading[]

  @@index([title])
}

model Author {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  Book      Book[]
}

model AddToCard {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  bookStore   BookStore @relation(fields: [bookStoreId], references: [id])
  bookStoreId String
  createAt    DateTime  @default(now())
  updateAt    DateTime  @updatedAt
}

model BookStore {
  id              String            @id @default(uuid())
  book            Book              @relation(fields: [bookId], references: [id])
  bookId          Int               @unique
  price           Int               @default(0)
  discount        Int               @default(0)
  outOfStock      Boolean           @default(false)
  createAt        DateTime          @default(now())
  updateAt        DateTime          @updatedAt
  AddToCard       AddToCard[]
  StoreBookReview StoreBookReview[]

  @@index([price, discount])
}

model Genere {
  id       String   @id @default(uuid())
  books    Book[]
  name     String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([name])
}

model PurchasedBook {
  id       String   @id @default(uuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  book     Book     @relation(fields: [bookId], references: [id])
  bookId   Int
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model BookReview {
  id       String   @id @default(uuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  book     Book     @relation(fields: [bookId], references: [id])
  bookId   Int
  rate     Int      @default(0)
  review   String?
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([rate])
}

model StoreBookReview {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  bookStore   BookStore @relation(fields: [bookStoreId], references: [id])
  bookStoreId String
  rate        Int       @default(0)
  review      String?
  createAt    DateTime  @default(now())
  updateAt    DateTime  @updatedAt

  @@index([rate])
}

model CurrentlyReading {
  id       String   @id @default(uuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  book     Book     @relation(fields: [bookId], references: [id])
  bookId   Int
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model FinishedReading {
  id       String   @id @default(uuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  book     Book     @relation(fields: [bookId], references: [id])
  bookId   Int
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}
