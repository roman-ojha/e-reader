// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  username        String            @unique
  first_name      String?
  last_name       String?
  email           String            @unique
  password        String
  is_admin        Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updateAt        DateTime          @updatedAt
  author          Author?
  AddToCard       AddToCard[]
  PurchasedBook   PurchasedBook[]
  BookReview      BookReview[]
  StoreBookReview StoreBookReview[]

  @@index([email, username])
}

model Book {
  id            Int             @id @default(autoincrement())
  author        Author          @relation(fields: [authorId], references: [id])
  authorId      Int
  title         String
  page          Int             @default(0)
  description   String?
  published     DateTime?
  langauge      String?
  createAt      DateTime        @default(now())
  updateAt      DateTime        @updatedAt
  BookStore     BookStore?
  genres        Genere[]
  PurchasedUser PurchasedBook[]
  BookReview    BookReview[]

  @@index([title])
}

model Author {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  Book      Book[]
}

model AddToCard {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  bookStore   BookStore @relation(fields: [bookStoreId], references: [id])
  bookStoreId Int
  createAt    DateTime  @default(now())
  updateAt    DateTime  @updatedAt
}

model BookStore {
  id              Int               @id @default(autoincrement())
  book            Book              @relation(fields: [bookId], references: [id])
  bookId          Int               @unique
  price           Int               @default(0)
  discount        Int               @default(0)
  outOfStock      Boolean           @default(false)
  createAt        DateTime          @default(now())
  updateAt        DateTime          @updatedAt
  AddToCard       AddToCard[]
  StoreBookReview StoreBookReview[]

  @@index([price, discount])
}

model Genere {
  id       Int      @id @default(autoincrement())
  books    Book[]
  name     String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model PurchasedBook {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  book     Book     @relation(fields: [bookId], references: [id])
  bookId   Int
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model BookReview {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  book     Book     @relation(fields: [bookId], references: [id])
  bookId   Int
  rate     Int      @default(0)
  review   String?
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model StoreBookReview {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  bookStore   BookStore @relation(fields: [bookStoreId], references: [id])
  bookStoreId Int
  rate        Int       @default(0)
  review      String?
  createAt    DateTime  @default(now())
  updateAt    DateTime  @updatedAt
}
